repeat wait() until game:IsLoaded()
print("<Color=Green>Bulbasaur Hub is loading..")

--//Modules
local Thoth = loadstring(game:HttpGet("https://bmohub.xyz/files/modules/thoth.lua"))()
local Webhook = loadstring(game:HttpGet("https://bmohub.xyz/files/modules/webhook.lua"))()
local prettyPrint = loadstring(game:HttpGet("https://bmohub.xyz/files/modules/prettyPrint.lua"))()
local ControlModule = loadstring(game:HttpGet("https://bmohub.xyz/files/modules/controlmodule.lua"))()
local SkeletonLib = loadstring(game:HttpGet("https://bmohub.xyz/files/modules/skeletonlibrary.lua"))()

local Control = ControlModule.new()

local player = game:GetService("Players").LocalPlayer
local char = player.Character
local camera = workspace.CurrentCamera
local workspaceEffects = workspace.Effects

local variables = {
    currentSpeed = 1,
    currentFly = 16,
    currentShipSpeed = 1,
    currentTweenSpeed = 1,
    pickupCD = 0,
    hitboxMultiplier = 1,
    geppoCooldown = 0.75,
    currentHitboxTrans = 0,
    currentHitboxColor = Color3.fromRGB(255, 0, 0),
    noPromptCD = nil,
    speedConnection = nil,
    flyConnection = nil,
    stunConnection = nil,
    ragdollConnection = nil,
    geppoBypass = nil,
    chestConnection = nil,
    hitboxConnection = nil,
    CDPickupConnection = nil,
    dfConnection = nil,
    noclipConnection = nil,
    speedBodyVelocity = nil,
    flyBodyVelocity = nil,
    storedChilds = nil,
    selectedIsland = nil,
    currentSwordAnim = nil,
    namecallSafeMode = nil,
    storedDF = nil,
    ogLightning = {},
    hitboxHookers = {},
    hitboxHooked = false,
    shipspeedHooked = false,
    nodashcdHooked = false,
    safemodeOn = false,
    isLightningStored = false
}

local farmvars = {
    autopica = false,
    isFamillyDead = false,
    isPicaDead = false,
    cleareffects = nil,
    horoamount = 500
}

local hitboxHookers = {}
local hitboxHooked = false
local hitboxMultiplier = 1

local checks = {
    isStunned = false,
    isTeleporting = false,
    isJumping = false
}

print("variables loaded")

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer

getgenv().Chams = true
getgenv().TeamColor = true -- Ak Ele vai usar a cor do time

local function ToggleChams(isToggled)
    getgenv().Chams = isToggled
end

RunService.RenderStepped:Connect(function()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local highlight = player.Character:FindFirstChild("Highlight")

            if getgenv().Chams then
                if getgenv().TeamColor then
                    if not highlight then
                        highlight = Instance.new("Highlight", player.Character)
                    end
                    highlight.FillColor = player.TeamColor.Color
                else
                    if not highlight then
                        highlight = Instance.new("Highlight", player.Character)
                    end
                    highlight.FillColor = Color3.fromRGB(150, 0, 255) -- Coloca A Cor Que Quiser
                end
            else
                if highlight then
                    highlight:Destroy()
                end
            end
        end
    end
end)

function variables:toggleSpeed(toggle)
    local player = player

    if toggle then
        if self.speedConnection then return end

        local character = player.Character
        local head = character and character:FindFirstChild("Head")
        if not head then 
            Thoth:debug("Character head not found")
            return 
        end

        self.speedBodyVelocity = Instance.new("BodyVelocity", head)
        self.speedBodyVelocity.Name = utf8.char(math.random(128, 1114111))
        self.speedBodyVelocity.MaxForce = Vector3.new(50000, 0, 50000)
        Thoth:debug("Speed Hooked")

        self.speedConnection = game:GetService("RunService").Heartbeat:Connect(function()
            local alignOrientation = head:FindFirstChild("AlignOrientation")
            if alignOrientation and not alignOrientation.Enabled then return end

            self.speedBodyVelocity.Velocity = camera.CFrame:VectorToWorldSpace(Control:GetMoveVector() * self.currentSpeed)
        end)
    else
        if self.speedConnection then
            self.speedConnection:Disconnect()
            self.speedConnection = nil
            Thoth:debug("Speed Un-Hooked")
        end
        if self.speedBodyVelocity then
            self.speedBodyVelocity:Destroy()
            self.speedBodyVelocity = nil
        end
    end
end

function variables:fly(toggled)
    local player = player
    local root = Thoth:root(player)

    if toggled then
        local character = char or player.CharacterAdded:Wait()
        if self.flyConnection then return end
        
        self.flyBodyVelocity = Instance.new("BodyVelocity")
        self.flyBodyVelocity.Name = utf8.char(math.random(128, 1114111))
        self.flyBodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        Thoth:debug("Fly Connected")
        
        self.flyConnection = game:GetService("RunService").Heartbeat:Connect(function()
            if not character or not root then return end
            local rootPart, camera = root, workspace.CurrentCamera
            self.flyBodyVelocity.Parent = rootPart
            self.flyBodyVelocity.Velocity = camera.CFrame:VectorToWorldSpace(Control:GetMoveVector() * self.currentFly)
        end)
        
    else
        if self.flyConnection then
            self.flyConnection:Disconnect()
            self.flyConnection = nil
            Thoth:debug("Fly Disconnected")
        end
        if self.flyBodyVelocity then
            self.flyBodyVelocity:Destroy()
            self.flyBodyVelocity = nil
        end
    end
end

function variables:nofalldamage(toggle)
    local player = player
    local character = char or player.CharacterAdded:Wait()
    local fallDamage = character:FindFirstChild("FallDamage")

    if not fallDamage then
        Thoth:debug("FallDamage script not found.")
        return
    end

    fallDamage.Disabled = toggle
    Thoth:debug("Fall Damage ".. tostring(not toggle))
end

function variables:skywalk(toggle)
    local player = player
    local playerName = player.Name
    local statsKey = "Stats" .. playerName
    local playerStats = game:GetService("ReplicatedStorage")[statsKey]

    if not playerStats then
        Thoth:debug("Player stats not found for " .. playerName)
        return
    end

    playerStats.Skills.skyWalk.Value = toggle
    Thoth:debug("Geppo toggled: " .. tostring(toggle))
end

function variables:noCDPickup(toggle)
    local ProximityPromptService = game:GetService("ProximityPromptService") or game:GetService("ProximityPromptService")
    if self.noPromptCD then return end

    if toggle then
        self.noPromptCD = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
            prompt.HoldDuration = self.pickupCD
        end)
    else
        if self.noPromptCD then
            self.noPromptCD:Disconnect()
            self.noPromptCD = nil
        end
    end
end


--//TODO
--Find a way to disable Day/Night Cycle
local fogConnection = nil
function variables:nofog(isToggled)
    local areas = { "Desert", "Tundra" }

    if isToggled then
        if not game:FindFirstChild("storedChild") and self.storedChilds == nil then
            local folder = Instance.new("Folder", workspace)
            folder.Name = "storedChilds"
            self.storedChilds = folder
        end

        fogConnection = game:GetService("RunService").Heartbeat:Connect(function()
            for _, child in pairs(workspace.Effects.Areas:GetChildren()) do
                for _, area in ipairs(areas) do
                    if child.Name == area and child:FindFirstChild("Settings") then
                        child.Settings.Weather.Value = "Normal"
                        child.Settings.WeatherIntensity.Value = 0
                    end
                end
            end
        end)        

        if not self.isLightningStored then
            for _, child in pairs(game:GetService("Lighting"):GetChildren()) do
                child.Parent = self.storedChilds
            end

            self.ogLightning = {
                FogEnd = game:GetService("Lighting").FogEnd,
                ClockTime = game:GetService("Lighting").ClockTime,
                FogStart = game:GetService("Lighting").FogStart,
                Brightness = game:GetService("Lighting").Brightness,
                OutdoorAmbient = game:GetService("Lighting").OutdoorAmbient,
                GlobalShadows = game:GetService("Lighting").GlobalShadows
            }
            self.isLightningStored = true
        end

        game:GetService("Lighting").FogEnd = 100000
        game:GetService("Lighting").ClockTime = 14
        game:GetService("Lighting").FogStart = 0
        game:GetService("Lighting").Brightness = 1.5
        game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        game:GetService("Lighting").GlobalShadows = false
        Thoth:debug("Lightning Stored")
    else
        if self.isLightningStored then
            for _, child in pairs(self.storedChilds:GetChildren()) do
                child.Parent = game:GetService("Lighting")
            end

            for prop, value in pairs(self.ogLightning) do
                game:GetService("Lighting")[prop] = value
            end
            self.isLightningStored = false

            for _, child in pairs(workspace.Effects.Areas:GetChildren()) do
                for _, area in ipairs(areas) do
                    if child.Name == "Desert" and child:FindFirstChild("Settings") then
                        child.Settings.Weather.Value = "Dust"
                        child.Settings.WeatherIntensity.Value = 1
                    elseif child.Name == "Tundra" and child:FindFirstChild("Settings") then
                        child.Settings.Weather.Value = "Snow"
                        child.Settings.WeatherIntensity.Value = 10
                    end
                end
            end
            Thoth:debug("Lightning Un-Stored")
        end
        if fogConnection then
            fogConnection:Disconnect()
            fogConnection = nil
        end
    end
end

local effects = game:GetService("Workspace").Effects

function variables:hitboxVisible(state)
    if state then
        if not self.hitboxConnection then
            self.hitboxConnection = effects.ChildAdded:Connect(function(child)
                if child.Name == "Part" and child.Transparency == 1 then
                    child.Size = Vector3.new(child.Size.X * hitboxMultiplier, child.Size.Y * hitboxMultiplier, child.Size.Z * hitboxMultiplier)

                    local fakePart = Instance.new("Part", child.Parent)
                    fakePart.Size = Vector3.new(child.Size.X * hitboxMultiplier, child.Size.Y * hitboxMultiplier, child.Size.Z * hitboxMultiplier)
                    fakePart.Transparency = self.currentHitboxTrans
                    fakePart.Material = Enum.Material.Neon
                    fakePart.Color = self.currentHitboxColor
                    fakePart.CanCollide = false
                    fakePart.Massless = true
                    
                    local fakeHitbox = Instance.new("Weld", fakePart)
                    fakeHitbox.Part1 = fakePart
                    fakeHitbox.Part0 = player.Character.HumanoidRootPart
                    fakeHitbox.C0 = CFrame.new(0, 0, -3)
                    wait(0.35)
                    fakePart:Destroy()                    
                end
            end)
        end
    else
        if self.hitboxConnection then
            self.hitboxConnection:Disconnect()
            self.hitboxConnection = nil
        end
    end
end

local RunService = game:GetService("RunService")

local killauraTable = { "Melee", "Sword" }

local function clearEffects(effectsTable)
    for _, effect in ipairs(effectsTable:GetChildren()) do
        if table.find(killauraTable, effect.Name) then
            for _, item in ipairs(effect:GetChildren()) do
                item:Destroy() 
            end
        end
    end
end

local Killamount
local function killRemote(arg1)
    local countTable = {}
    for i = 1, Killamount do
        countTable[i] = arg1
    end

    local function damageTable(index)
        return {
            "damage",
            countTable,
            "Melee",
            { index, "Ground", "Melee" },
            true,
            arg1.CFrame,
            ["aircombo"] = "Ground"
        }
    end

    for i = 1, 4 do
        game:GetService("ReplicatedStorage").Events.CombatRegister:InvokeServer(damageTable(i))
    end
end

local function getClosestCharacter()
    local closestCharacter = nil
    local shortestDistance = radius

    for _, character in pairs(game:GetService("Workspace").PlayerCharacters:GetChildren()) do
        if character:IsA("Model") and character ~= player.Character and character:FindFirstChild("HumanoidRootPart") then
            local distance = (character.HumanoidRootPart.Position - playerPosition.Position).magnitude
            if distance < shortestDistance then
                closestCharacter = character.HumanoidRootPart
                shortestDistance = distance
            end
        end
    end

    return closestCharacter
end

local keepLooping = false
local function killClosest(player, radius)
    local playerPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if not playerPosition then return end

    local function getClosestCharacter()
        local closestCharacter = nil
        local shortestDistance = radius
    
        for _, character in pairs(game:GetService("Workspace").PlayerCharacters:GetChildren()) do
            if character:IsA("Model") and character ~= player.Character and character:FindFirstChild("HumanoidRootPart") then
                local distance = (character.HumanoidRootPart.Position - playerPosition.Position).magnitude
                if distance < shortestDistance then
                    closestCharacter = character.HumanoidRootPart
                    shortestDistance = distance
                end
            end
        end
    
        return closestCharacter
    end

    while true do
        local closestCharacter = getClosestCharacter()
        if closestCharacter then
            killRemote(closestCharacter)
            print("Closest Character: " .. closestCharacter.Parent.Name)
        end

        if not keepLooping then
            break
        end
        wait(0.5)
    end
end


local lib = loadstring(game:HttpGet"https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/Vape.txt")()

local win = lib:Window("Bulbasaur Hub | Battle Royale Edition | GPO",Color3.fromRGB(173, 252, 108), Enum.KeyCode.RightControl)

local tab = win:Tab("Main")

local tab2 = win:Tab("Hitbox")

local tab3 = win:Tab("Others")

tab:Button("Button", function()
lib:Notification("Notification", "Button Pressed", "Ok.")
end)

tab:Toggle("Player Kill Aura",false, function(isToggled)
    keepLooping = isToggled
    if isToggled then
        killClosest(player, 50)
    end
end)

tab:Slider("Hits Per Second",0,1000,150, function(isSlided) function(amountValue)
    Killamount = amountValue
end)

tab:Toggle("Toggle Walkspeed",false, function(isToggled) variables:toggleSpeed(isToggled)
 end)

tab:Slider("Walkspeed",0,100,80, function(speedValue) variables.currentSpeed = speedValue 
end) 

tab3:Toggle("No-Fog",false, function(isToggled) variables:nofog(isToggled)
 end) 

tab3:Toggle("Get Geppo",false, function(isToggled) variables:skywalk(isToggled) 
end)

tab3:Toggle("Players ESP",false, function(isToggled)
ToggleChams(isToggled) 
end)

tab2:Toggle("Toggle Hitbox",false, function(isToggled)
    variables:hitboxVisible(isToggled)
end)

tab2:Slider("Hitbox Multiplier",0,50,1, function(multi)
    hitboxMultiplier = multi
end)


tab:Toggle("Toggle Fly",false, function(isToggled)
    variables:fly(isToggled)
end)

tab:Slider("Fly Speed",0,150,0, function(speedValue)
    variables.currentFly = speedValue
end)
